openapi: 3.0.1
info:
  title: Products Management API
  description: This API exposes endpoints to manage items.
  termsOfService: https://www.busher.com/terms
  contact:
    name: Busher
    url: https://www.busher.com
    email: busher@gmail.com
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
  version: "1.0"
servers:
- url: http://localhost:8080
#- url: http://artsoft.us-east-1.elasticbeanstalk.com
  description: Server URL in Development environment
#- url: http://artsoft.us-east-1.elasticbeanstalk.com
- url: http://localhost:8080
  description: Server URL in Production environment
security:
- BearerAuthentication: []
paths:
  /user/{userId}/address:
    get:
      tags:
      - user-controller
      operationId: getAddress
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
    put:
      tags:
      - user-controller
      operationId: putAddress
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
  /auth/verify:
    post:
      tags:
      - authentication-controller
      operationId: verifyEmail
      parameters:
      - name: token
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /auth/reset:
    post:
      tags:
      - authentication-controller
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /auth/register:
    post:
      tags:
      - authentication-controller
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /auth/login:
    post:
      tags:
      - authentication-controller
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /auth/forgot:
    post:
      tags:
      - authentication-controller
      operationId: forgotPassword
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /user/{userId}/address/{addressId}:
    patch:
      tags:
      - user-controller
      operationId: patchAddress
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: addressId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
  /product:
    get:
      tags:
      - product-controller
      operationId: getProducts
      parameters:
      - name: searchTerm
        in: query
        required: false
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProduct'
  /order:
    get:
      tags:
      - order-controller
      operationId: getOrders
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebOrder'
  /auth/me:
    get:
      tags:
      - authentication-controller
      operationId: getLoggedInUserProfile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalUser'
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        country:
          type: string
    PasswordResetBody:
      required:
      - password
      - token
      type: object
      properties:
        token:
          type: string
        password:
          maxLength: 32
          minLength: 6
          pattern: "^(?=.*[a-zA-Z])(?=.*\\d).{6,}$"
          type: string
    RegistrationBody:
      required:
      - email
      - firstName
      - lastName
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 255
          minLength: 3
          type: string
        email:
          type: string
        password:
          maxLength: 32
          minLength: 6
          pattern: "^(?=.*[a-zA-Z])(?=.*\\d).{6,}$"
          type: string
        firstName:
          type: string
        lastName:
          type: string
    LoginBody:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        jwt:
          type: string
        failureReason:
          type: string
        success:
          type: boolean
    Inventory:
      type: object
      properties:
        id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
    PageProduct:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        shortDescription:
          type: string
        longDescription:
          type: string
        price:
          type: number
          format: double
        inventory:
          $ref: '#/components/schemas/Inventory'
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    LocalUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        isEmailVerified:
          type: boolean
        enabled:
          type: boolean
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        accountNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
        credentialsNonExpired:
          type: boolean
    WebOrder:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/LocalUser'
        address:
          $ref: '#/components/schemas/Address'
        quantities:
          type: array
          items:
            $ref: '#/components/schemas/WebOrderQuantities'
    WebOrderQuantities:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          format: int32
  securitySchemes:
    BearerAuthentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
